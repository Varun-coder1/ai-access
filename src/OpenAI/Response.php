<?php

/**
 * This file is part of the AI Access library.
 * Copyright (c) 2024 David Grudl (https://davidgrudl.com)
 */

declare(strict_types=1);

namespace AIAccess\OpenAI;

use AIAccess;

/**
 * Represents a response from the OpenAI API.
 */
final class Response implements AIAccess\Response
{
	private string $text;
	private ?string $finishReason = null;

	/** @var array<string, int>|null */
	private ?array $usage = null;


	/**
	 * @param mixed $rawResponse Parsed JSON response data from the API.
	 */
	public function __construct(
		private array $rawResponse,
	) {
		$this->parseRawResponse($this->rawResponse);
	}


	/**
	 * Gets the aggregated text output generated by the model.
	 */
	public function getText(): string
	{
		return $this->text;
	}


	/**
	 * Gets the reason the model stopped generating output.
	 * If the response is incomplete, the reason will be given in "incomplete_details".
	 */
	public function getFinishReason(): ?string
	{
		return $this->finishReason;
	}


	/**
	 * Gets token usage information.
	 * Keys: 'inputTokens', 'outputTokens', 'reasoningTokens' and others.
	 */
	public function getUsage(): ?array
	{
		return $this->usage;
	}


	/**
	 * Gets the raw, unprocessed response data from the API provider.
	 */
	public function getRawResponse(): mixed
	{
		return $this->rawResponse;
	}


	/**
	 * Parses the raw OpenAI API response.
	 */
	private function parseRawResponse(array $data): void
	{
		$this->text = '';
		if (is_array($data['output'] ?? null)) {
			$textParts = [];
			foreach ($data['output'] as $item) {
				if (
					($item['type'] ?? null) === 'message'
					&& is_array($item['content'] ?? null)
				) {
					foreach ($item['content'] as $contentBlock) {
						if (
							($contentBlock['type'] ?? null) === 'output_text'
							&& is_string($contentBlock['text'] ?? null)
						) {
							$textParts[] = $contentBlock['text'];
						}
					}
				}
			}
			$this->text = implode("\n", $textParts);
		}

		$this->finishReason = is_string($data['incomplete_details']['reason'] ?? null)
			? $data['incomplete_details']['reason']
			: null;

		if (is_array($data['usage'] ?? null)) {
			$this->usage = [
				'inputTokens' => $data['usage']['input_tokens'] ?? 0,
				'outputTokens' => $data['usage']['output_tokens'] ?? 0,
				'reasoningTokens' => $data['usage']['reasoning_tokens'] ?? 0,
			] + $data['usage'];
		}
	}
}
