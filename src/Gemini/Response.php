<?php

/**
 * This file is part of the AI Access library.
 * Copyright (c) 2024 David Grudl (https://davidgrudl.com)
 */

declare(strict_types=1);

namespace AIAccess\Gemini;

use AIAccess;


/**
 * Represents a response from the Gemini API.
 */
final class Response implements AIAccess\Response
{
	private string $text = '';
	private ?string $finishReason = null;
	private ?array $usage = null;


	public function __construct(
		private array $rawResponse,
	) {
		$this->parseRawResponse($this->rawResponse);
	}


	/** Gets the main textual content generated by the model. */
	public function getText(): string
	{
		return $this->text;
	}


	/** Gets the reason the model stopped generating output (e.g., 'STOP', 'MAX_TOKENS', 'SAFETY'). */
	public function getFinishReason(): ?string
	{
		return $this->finishReason;
	}


	/**
	 * Gets token usage information, if provided by the API.
	 * Keys: 'inputTokens', 'outputTokens', 'reasoningTokens'.
	 */
	public function getUsage(): ?array
	{
		return $this->usage;
	}


	public function getRawResponse(): mixed
	{
		return $this->rawResponse;
	}


	/**
	 * Populates properties by parsing the raw response data.
	 */
	private function parseRawResponse(array $data): void
	{
		if (!is_array($data)) {
			throw new AIAccess\ApiException('Invalid response data');
		}

		$textParts = [];
		// Check standard candidates structure
		if (is_array($data['candidates'][0]['content']['parts'] ?? null)) {
			foreach ($data['candidates'][0]['content']['parts'] as $part) {
				if (is_string($part['text'] ?? null)) {
					$textParts[] = $part['text'];
				}
			}
		// Fallback for simpler structures (less common)
		} elseif (is_string($data['candidates'][0]['text'] ?? null)) {
			$textParts[] = $data['candidates'][0]['text'];
		}
		$this->text = implode('', $textParts);

		if (is_string($data['candidates'][0]['finishReason'] ?? null)) {
			$this->finishReason = $data['candidates'][0]['finishReason'];
		}

		if (is_array($data['usageMetadata'] ?? null)) {
			$this->usage = [
				'inputTokens' => $data['usageMetadata']['promptTokenCount'] ?? 0,
				'outputTokens' => $data['usageMetadata']['candidatesTokenCount'] ?? 0,
				'reasoningTokens' => null,
			] + $data['usageMetadata'];
		}
	}
}
