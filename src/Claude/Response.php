<?php

/**
 * This file is part of the AI Access library.
 * Copyright (c) 2024 David Grudl (https://davidgrudl.com)
 */

declare(strict_types=1);

namespace AIAccess\Claude;

use AIAccess;


/**
 * Represents a response from the Claude API.
 */
final class Response implements AIAccess\Response
{
	private string $text = '';
	private ?string $finishReason = null;
	private ?array $usage = null;
	private ?array $contentBlocks = null;


	public function __construct(
		private array $rawResponse,
	) {
		$this->parseRawResponse($this->rawResponse);
	}


	/** Gets the main textual content generated by the model. */
	public function getText(): string
	{
		return $this->text;
	}


	/** Gets the reason the model stopped generating output (e.g., 'end_turn', 'max_tokens', 'stop_sequence', 'tool_use'). */
	public function getFinishReason(): ?string
	{
		return $this->finishReason;
	}


	/**
	 * Gets token usage information, if provided by the API.
	 * Keys: 'inputTokens', 'outputTokens', 'reasoningTokens' and potentially 'cache_creation_input_tokens', 'cache_read_input_tokens'.
	 */
	public function getUsage(): ?array
	{
		return $this->usage;
	}


	/**
	 * Gets all content blocks from the response, which may include text, tool_use, thinking, etc.
	 */
	public function getContentBlocks(): ?array
	{
		return $this->contentBlocks;
	}


	public function getRawResponse(): mixed
	{
		return $this->rawResponse;
	}


	/**
	 * Populates properties by parsing the raw response data.
	 */
	private function parseRawResponse(array $data): void
	{
		if (is_array($data['content'] ?? null)) {
			$this->contentBlocks = $data['content'];
		}

		if (is_array($data['content'] ?? null)) {
			$textContent = [];

			// Process all content blocks
			foreach ($data['content'] as $contentBlock) {
				if (isset($contentBlock['type']) && $contentBlock['type'] === 'text' && isset($contentBlock['text'])) {
					$textContent[] = $contentBlock['text'];
				} elseif (isset($contentBlock['type']) && $contentBlock['type'] === 'tool_use') {
					// Handle tool use content (tool name and input)
					$toolName = $contentBlock['name'] ?? 'unknown-tool';
					$toolInput = json_encode($contentBlock['input'] ?? []);
					$textContent[] = "[Tool use: {$toolName} with input: {$toolInput}]";
				} elseif (isset($contentBlock['type']) && $contentBlock['type'] === 'thinking') {
					// Handle thinking content
					$textContent[] = '[Thinking: ' . ($contentBlock['text'] ?? '') . ']';
				}
			}

			$this->text = implode("\n", $textContent);
		} elseif (isset($data['content'][0]['text'])) {
			// Legacy or simplified response format
			$this->text = $data['content'][0]['text'];
		}

		if (isset($data['stop_reason'])) {
			$this->finishReason = $data['stop_reason'];
		}

		if (isset($data['usage'])) {
			$this->usage = [
				'inputTokens' => $data['usage']['input_tokens'] ?? 0,
				'outputTokens' => $data['usage']['output_tokens'] ?? 0,
				'reasoningTokens' => $data['usage']['reasoning_tokens'] ?? 0,
			] + $data['usage'];
		}
	}
}
